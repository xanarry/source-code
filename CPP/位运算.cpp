#include <iostream>
using namespace std;

int main(int argc, char const *argv[])
{
    //计算机32位整数
    int a = 5; //0000 0101, 其中最高位为符号为, 所有实际上数字表示为后7位
    //二进制按位取反(反码): ~ 单目运算符
    int b = ~a;
    cout << b << endl;//输出2, 0000 0101按位取反后变成1111 1010, 去掉符号位1, 为111 1010,取反变成000 0101加1变成000 0110, 也就是-6
    //位与(同为1则取1, 否则取0): & 双目运算符
    int c = a & 0xFFFFFFFF; //将5(0000 0101)与1111 1111取与, 变成0000 0101, 二进制5
    cout << c << endl;
    c = a & 0x00000000;//将5(0000 0101)与0000 0000取与, 变成0000 0000, 二进制0
    cout << c << endl;

    //位或(两位有一个为1则取1): | 双目运算符
    int d = a | 0xFFFFFFFF;//将5(0000 0101)与1111 1111取与, 变成1111 1111, 二进制-1,
    cout << d << endl;

    //位异或(两位其中一个为1但是不都为1则取1, 否则取0): ^ 双目运算符
    int f = a ^ 0xFFFFFFFF;//0000 0101与纯1取异或, 得到1111 1010, 即十进制-6
    cout << f << endl;
    f = a ^ 0x00000000;//只有5的二进制码上有1, 所以得到二进制码:0000 0101, 十进制5
    cout << f << endl;

    //左移(<<), 将二进制码像左边移动, 右端补上0
    b = a << 1; //0000 0101左移动一位变成0000 1010, 也就变成了十进制10
    cout << b << endl;

    //右移(>>), 将二进制码向右边移动, 左边补上0
    b = a >> 1;//0000 0101右移变成0000 0010, 十进制2
    cout << b << endl;

    //实际上左移多少位相当于将原来的数乘上2的多少次方, 右移则相当于除以2的多少次方
    
    return 0;
}

